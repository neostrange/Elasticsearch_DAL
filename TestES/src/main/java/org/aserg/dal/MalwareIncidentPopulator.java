/**
 * 
 */
package org.aserg.dal;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.commons.codec.digest.DigestUtils;
import org.aserg.model.MalwareIncident;
import org.aserg.model.Origin;
import org.aserg.model.VirusTotalScan;
import org.aserg.utility.EnrichmentUtility;
import org.aserg.utility.IOFileUtility;
import org.aserg.utility.SqlUtility;
import org.elasticsearch.index.cache.filter.FilterCache.EntriesStats;

/**
 * @author Waseem
 *
 */
public class MalwareIncidentPopulator {

	public MalwareIncidentPopulator() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * 
	 * @see org.aserg.dal.IncidentPopulator#populate(java.sql.ResultSet)
	 */

	public List<MalwareIncident> populate() {

		int size = 0; // These are the number of records
		MalwareIncident malIncident = null; // To populate the Malware Objects
		HashMap<String, String> vtr = null; // HashMap will store the Scanner
		// and Result of a specific hash
		VirusTotalScan vts = null; // To populate the Virustotal Object in the
		List<MalwareIncident> malwareIncidentList = new ArrayList<MalwareIncident>(); 

		// Malware incident
		int count = 1;
		String prev = null;

		/*
		 * Will initialize the date
		 */
		/*
		 * if(StateUtility.readTime("Malware") == null){
		 * StateUtility.writeTime("Malware", new Date(
		 * Long.parseLong("31536000") * 1000 ).toString() ); }
		 */
		// SqlUtility.setTime(IOFileUtility.readTime("Malware"));
		ResultSet rslast = SqlUtility.getResultSet(SqlUtility.MALWARE_INCIDENT_QUERY_COUNT,
				SqlUtility.dionaeaConnection, IOFileUtility.readTime("malwareTime"));
		ResultSet rs = SqlUtility.getResultSet(SqlUtility.MALWARE_INCIDENT_QUERY, SqlUtility.dionaeaConnection,
				IOFileUtility.readTime("malwareTime"));
		try {

			size = rslast.getInt("total");
			if (size != 0)
				IOFileUtility.writeTime("malwareTime", rslast.getString("connection_datetime"));
			System.out.println(size);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			while (rs.next()) {
				
				Origin org = EnrichmentUtility.getOrigin(rs.getString("remote_host"));
				org = org == null? null: org;
				// if equal to prev record
				if (rs.getString("order_id").equals(prev)) {
					vtr.put(rs.getString("virustotalscan_scanner"), rs.getString("virustotalscan_result"));

				} else {
					// add prev malIncident to list, or the last one
					if (malIncident != null) {
						if (vts != null) {
							vts.setVTscanResults(vtr);
							malIncident.setVtScan(vts);
							vts = null;
						}
						malwareIncidentList.add(malIncident);
						vts = null;
					}

					vtr = new HashMap<String, String>();
					String datetime;
					try {
						datetime = rs.getString("connection_datetime");
						malIncident = new MalwareIncident(datetime.replace(' ', 'T'), rs.getString("remote_host"),
								rs.getInt("remote_port"), rs.getString("connection_protocol"),
								rs.getString("local_host"), rs.getInt("local_port"),
								rs.getString("connection_transport"), org, rs.getString("download_md5_hash"),
								rs.getString("download_url"), rs.getString("download_url"), null, vts);
						if (rs.getString("virustotal_permalink") != null) {
							vtr.put(rs.getString("virustotalscan_scanner"), rs.getString("virustotalscan_result"));
							vts = new VirusTotalScan(rs.getString("virustotal_permalink"), vtr);
							malIncident.setVtScan(vts);
						}

						prev = rs.getString("order_id");
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

				}

				// for the last one
				if (count == size && !malwareIncidentList.contains(malIncident)) {
					malwareIncidentList.add(malIncident);
				}
				count++;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return malwareIncidentList;
	}
	
	public List<MalwareIncident> populateSsh(){
		
		List<MalwareIncident> malwareIncidentList = new ArrayList<MalwareIncident>();
		MalwareIncident malwareIncident = null;
		ResultSet rs = SqlUtility.getResultSet(SqlUtility.SSH_MALWARE_INCIDENT_QUERY, SqlUtility.kippoConnection,
				IOFileUtility.readTime("sshMalwareTime"));
		
		try {
			while (rs.next()) {

				String remotehost = rs.getString("ip");
				
				Origin origin = EnrichmentUtility.getOrigin(remotehost);
				origin = origin == null? null: origin;

				// Calculate malware hash
				FileInputStream fis = null;
				String hash = "";
				try{
					fis = new FileInputStream(new File(SqlUtility.getName().getProperty("MALWARE_BIN_PATH")+rs.getString("binary")));
					hash = DigestUtils.md5Hex(fis);
					fis.close();
				} catch (FileNotFoundException fne){
					fne.printStackTrace();
				}
				System.out.println("Digest:" + hash);
				// In case a malware has been downloaded
				IOFileUtility.writeTime("sshMalwareTime", rs.getString("connection_datetime"));
				malwareIncident = new MalwareIncident(rs.getString("timestamp").replace(' ', 'T'), remotehost, 22, "ssh", rs.getString("localhost"), 22, null, origin, hash, rs.getString("url"),rs.getString("binary") , rs.getString("id"), null);
				malwareIncidentList.add(malwareIncident);

			}
		} catch (SQLException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return malwareIncidentList;
	}

}
